
type Candle {
  open: Float!
  high: Float!
  low: Float!
  close: Float!
  time: String!
  timeFrame: Timeframe!
}

type Transaction {
  type: TransactionType!
  unit: String!
  weth: String!
  timestamp: String!
  price: String!
  sender: String!
  to: String!
}

enum TransactionType {
  BUY
  SELL
}

enum Protocol {
	UNISWAPV2
	UNISWAPV3
}

enum Timeframe {
	D1
  H4
  H1
  M15
  M5
  M1
}

type token {
  pairAddress: String!
  numberOfDecimals: Int!
  latestPrice: Float
  price15: Float
  price60: Float
  price1d: Float
  protocol: Protocol!
}

type Pair {
  name: String!
  longName: String
  price: String!
  reserve0: String!
  reserve1: String!
  symbol0: String!
  symbol1: String!
  token0Decimals: String!
  token1Decimals: String!
  protocol: Protocol!
}

input GetPairInput {
	pairAddress: String!
  protocol: Protocol!
}

input GetOhlcInput {
	pairAddress: String!
  protocol: Protocol!
  timeframe: Timeframe!
  dateFrom: String!
  dateTo: String!
}

input GetSwapsInput {
  pairAddress: String!
  protocol: Protocol!
  dateFrom: String!
  dateTo: String!
  number: Int
  page: Int
}

input AddPairInput {
  pairAddress: String!
  protocol: Protocol!
}

input GetPairsInput {
  name: String
  protocol: Protocol
}

type PublicQuery {
  test: String!
  getPair(
    payload: GetPairInput!
  ):Pair!
  getOhlc(
    payload: GetOhlcInput!
  ):[Candle!]!
  loadOhlc(
    payload: GetOhlcInput!
  ):[Candle!]!
  getOhlcDirectly(
    payload: GetOhlcInput!
  ):[Candle!]!
  getSwaps(
    payload: GetSwapsInput!
  ):[Transaction!]!
  getPairs(
    payload: GetPairsInput!
  ):[Pair!]!
}

type AuthQuery {
  test: String!
}

type AuthMutation {
  test: String!
}

type PublicMutation {
  test: String!
  addPair(
    payload: AddPairInput!
  ): Boolean
}

type Mutation {
  publicMutation: PublicMutation!
  authMutation: AuthMutation!
}

type Query {
  publicQuery: PublicQuery
  authQuery: AuthQuery
}

schema{
  mutation: Mutation
  query: Query
}